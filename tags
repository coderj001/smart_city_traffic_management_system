!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/raju/Developer/GoLangaugeProjects/smart_city_traffic_management_system/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
1. Requirements Analysis and Planning:	Degin&Imp.md	/^### 1. Requirements Analysis and Planning:$/;"	S
10. Deployment and Monitoring:	Degin&Imp.md	/^### 10. Deployment and Monitoring:$/;"	S
11. Security Measures:	Degin&Imp.md	/^### 11. Security Measures:$/;"	S
12. Scalability and Maintainability:	Degin&Imp.md	/^### 12. Scalability and Maintainability:$/;"	S
2. Architectural Design:	Degin&Imp.md	/^### 2. Architectural Design:$/;"	S
3. Database Design:	Degin&Imp.md	/^### 3. Database Design:$/;"	S
4. API Design:	Degin&Imp.md	/^### 4. API Design:$/;"	S
5. Caching Strategy:	Degin&Imp.md	/^### 5. Caching Strategy:$/;"	S
6. Implementing Business Logic:	Degin&Imp.md	/^### 6. Implementing Business Logic:$/;"	S
7. Containerization with Docker:	Degin&Imp.md	/^### 7. Containerization with Docker:$/;"	S
8. Testing Strategy:	Degin&Imp.md	/^### 8. Testing Strategy:$/;"	S
9. Performance Considerations:	Degin&Imp.md	/^### 9. Performance Considerations:$/;"	S
Additional Features:	DOC.md	/^#### Additional Features:$/;"	t	subsection:Story Overview:
AverageSpeed	internal/models/sensor_data.model.go	/^	AverageSpeed float64   `json:"average_speed,omitempty"`$/;"	m	struct:models.SensorDataInput	typeref:typename:float64
AverageSpeed	internal/models/sensor_data.model.go	/^	AverageSpeed float64$/;"	m	struct:models.SensorData	typeref:typename:float64
Brief:	README.md	/^#### Brief:$/;"	t	subsection:Coding Challenge: Smart City Traffic Management System
Charset	internal/config/config.go	/^	Charset  string$/;"	m	struct:config.DBConfig	typeref:typename:string
Coding Challenge: Smart City Traffic Management System	README.md	/^### Coding Challenge: Smart City Traffic Management System$/;"	S
Config	internal/config/config.go	/^type Config struct {$/;"	s	package:config
ConnectDB	internal/repository/connetDB.go	/^func ConnectDB() {$/;"	f	package:repository
Create	internal/controllers/sensor.controller.go	/^func (sc *SensorController) Create(ctx *gin.Context) {$/;"	f	struct:controllers.SensorController
CreateSensorRequest	internal/models/sensor.model.go	/^type CreateSensorRequest struct {$/;"	s	package:models
CreatedAt	internal/models/sensor.model.go	/^	CreatedAt    time.Time    `json:"created_at"`$/;"	m	struct:models.Sensor	typeref:typename:time.Time
DB	internal/config/config.go	/^	DB   *DBConfig$/;"	m	struct:config.Config	typeref:typename:*DBConfig
DB	internal/controllers/sensor.controller.go	/^	DB *gorm.DB$/;"	m	struct:controllers.SensorController	typeref:typename:*gorm.DB
DB	internal/controllers/sensor_data.controller.go	/^	DB *gorm.DB$/;"	m	struct:controllers.SensorDataController	typeref:typename:*gorm.DB
DB	internal/repository/connetDB.go	/^var DB *gorm.DB$/;"	v	package:repository	typeref:typename:*gorm.DB
DBConfig	internal/config/config.go	/^type DBConfig struct {$/;"	s	package:config
Data	internal/models/sensor.model.go	/^	Data         []SensorData `gorm:"foreignKey:SensorID;references:ID"`$/;"	m	struct:models.Sensor	typeref:typename:[]SensorData
Description	internal/models/incident.model.go	/^	Description string    `gorm:"varchar(255)"`$/;"	m	struct:models.Incident	typeref:typename:string
Dialect	internal/config/config.go	/^	Dialect  string$/;"	m	struct:config.DBConfig	typeref:typename:string
GetAll	internal/controllers/sensor.controller.go	/^func (sc *SensorController) GetAll(ctx *gin.Context) {$/;"	f	struct:controllers.SensorController
GetByID	internal/controllers/sensor.controller.go	/^func (sc *SensorController) GetByID(ctx *gin.Context) {$/;"	f	struct:controllers.SensorController
GetConfig	internal/config/config.go	/^func GetConfig() *Config {$/;"	f	package:config	typeref:typename:*Config
GetSensorData	internal/controllers/sensor_data.controller.go	/^func (c *SensorDataController) GetSensorData() {}$/;"	f	struct:controllers.SensorDataController
HandleError	internal/services/handleError.go	/^func HandleError(ctx *gin.Context, statusCode int, err error) {$/;"	f	package:services
Host	internal/config/config.go	/^	Host     string$/;"	m	struct:config.DBConfig	typeref:typename:string
Host	internal/config/config.go	/^	Host string$/;"	m	struct:config.Config	typeref:typename:string
ID	internal/models/incident.model.go	/^	ID          uint      `gorm:"primaryKey"`$/;"	m	struct:models.Incident	typeref:typename:uint
ID	internal/models/sensor.model.go	/^	ID           uuid.UUID    `gorm:"primary_key;type:uuid;default:uuid_generate_v4()" json:"id"`$/;"	m	struct:models.Sensor	typeref:typename:uuid.UUID
Id	internal/models/sensor_data.model.go	/^	Id           uint      `gorm:"primaryKey"`$/;"	m	struct:models.SensorData	typeref:typename:uint
Incident	internal/models/incident.model.go	/^type Incident struct {$/;"	s	package:models
IncidentData	internal/models/sensor.model.go	/^	IncidentData []Incident   `gorm:"foreignKey:SensorID;references:ID"`$/;"	m	struct:models.Sensor	typeref:typename:[]Incident
InitSensorDataRouter	internal/routers/sensor_data.router.go	/^func (s *SensorDataRouterContrDataoller) InitSensorDataRouter(rg *gin.RouterGroup) {$/;"	f	unknown:routers.SensorDataRouterContrDataoller
InitSensorRouter	internal/routers/sensor.router.go	/^func (s *SensorRouterController) InitSensorRouter(rg *gin.RouterGroup) {$/;"	f	struct:routers.SensorRouterController
Key Components:	README.md	/^#### Key Components:$/;"	t	subsection:Coding Challenge: Smart City Traffic Management System
Key Features and Endpoints:	DOC.md	/^#### Key Features and Endpoints:$/;"	t	subsection:Story Overview:
Latitude	internal/models/sensor.model.go	/^	Latitude     float64      `gorm:"type:float;not null" json:"latitude"`$/;"	m	struct:models.Sensor	typeref:typename:float64
Latitude	internal/models/sensor.model.go	/^	Latitude  float64 `json:"latitude" binding:"required"`$/;"	m	struct:models.CreateSensorRequest	typeref:typename:float64
Latitude	internal/models/sensor.model.go	/^	Latitude  float64 `json:"latitude,omitempty"`$/;"	m	struct:models.UpdateSensorRequest	typeref:typename:float64
Longitude	internal/models/sensor.model.go	/^	Longitude    float64      `gorm:"type:float;not null"  json:"longitude"`$/;"	m	struct:models.Sensor	typeref:typename:float64
Longitude	internal/models/sensor.model.go	/^	Longitude float64 `json:"longitude" binding:"required"`$/;"	m	struct:models.CreateSensorRequest	typeref:typename:float64
Longitude	internal/models/sensor.model.go	/^	Longitude float64 `json:"longitude,omitempty"`$/;"	m	struct:models.UpdateSensorRequest	typeref:typename:float64
Name	internal/config/config.go	/^	Name     string$/;"	m	struct:config.DBConfig	typeref:typename:string
NewSensorController	internal/controllers/sensor.controller.go	/^func NewSensorController(db *gorm.DB) *SensorController {$/;"	f	package:controllers	typeref:typename:*SensorController
NewSensorDataController	internal/controllers/sensor_data.controller.go	/^func NewSensorDataController(db *gorm.DB) *SensorDataController {$/;"	f	package:controllers	typeref:typename:*SensorDataController
NewSensorDataRouterController	internal/routers/sensor_data.router.go	/^func NewSensorDataRouterController(sensorDataController controllers.SensorDataController) *Senso/;"	f	package:routers	typeref:typename:*SensorDataRouterController
NewSensorRouterController	internal/routers/sensor.router.go	/^func NewSensorRouterController(sensorController controllers.SensorController) *SensorRouterContr/;"	f	package:routers	typeref:typename:*SensorRouterController
Password	internal/config/config.go	/^	Password string$/;"	m	struct:config.DBConfig	typeref:typename:string
Port	internal/config/config.go	/^	Port     int$/;"	m	struct:config.DBConfig	typeref:typename:int
Port	internal/config/config.go	/^	Port string$/;"	m	struct:config.Config	typeref:typename:string
PostSensorData	internal/controllers/sensor_data.controller.go	/^func (c *SensorDataController) PostSensorData() {}$/;"	f	struct:controllers.SensorDataController
Rate	internal/models/sensor.model.go	/^	Rate         float64      `gorm:"type:float;not null"  json:"rate"`                            /;"	m	struct:models.Sensor	typeref:typename:float64
Rate	internal/models/sensor.model.go	/^	Rate      float64 `json:"rate" binding:"required"`$/;"	m	struct:models.CreateSensorRequest	typeref:typename:float64
Rate	internal/models/sensor.model.go	/^	Rate      float64 `json:"rate,omitempty"`$/;"	m	struct:models.UpdateSensorRequest	typeref:typename:float64
Real-Life Application:	README.md	/^#### Real-Life Application:$/;"	t	subsection:Coding Challenge: Smart City Traffic Management System
Sensor	internal/models/sensor.model.go	/^type Sensor struct {$/;"	s	package:models
SensorController	cmd/api/main.go	/^	SensorController           controllers.SensorController$/;"	v	package:main	typeref:typename:controllers.SensorController
SensorController	internal/controllers/sensor.controller.go	/^type SensorController struct {$/;"	s	package:controllers
SensorData	internal/models/sensor_data.model.go	/^type SensorData struct {$/;"	s	package:models
SensorDataController	cmd/api/main.go	/^	SensorDataController       controllers.SensorDataController$/;"	v	package:main	typeref:typename:controllers.SensorDataController
SensorDataController	internal/controllers/sensor_data.controller.go	/^type SensorDataController struct {$/;"	s	package:controllers
SensorDataInput	internal/models/sensor_data.model.go	/^type SensorDataInput struct {$/;"	s	package:models
SensorDataRouterController	cmd/api/main.go	/^	SensorDataRouterController routers.SensorDataRouterController$/;"	v	package:main	typeref:typename:routers.SensorDataRouterController
SensorDataRouterController	internal/routers/sensor_data.router.go	/^type SensorDataRouterController struct {$/;"	s	package:routers
SensorID	internal/models/incident.model.go	/^	SensorID    uuid.UUID `gorm:"type:uuid;not null;index"`$/;"	m	struct:models.Incident	typeref:typename:uuid.UUID
SensorID	internal/models/sensor_data.model.go	/^	SensorID     uuid.UUID `gorm:"type:uuid;not null;index"` \/\/ This is the foreign key$/;"	m	struct:models.SensorData	typeref:typename:uuid.UUID
SensorID	internal/models/sensor_data.model.go	/^	SensorID     uuid.UUID `json:"sensor_id" binding:"required"`$/;"	m	struct:models.SensorDataInput	typeref:typename:uuid.UUID
SensorRouterController	cmd/api/main.go	/^	SensorRouterController     routers.SensorRouterController$/;"	v	package:main	typeref:typename:routers.SensorRouterController
SensorRouterController	internal/routers/sensor.router.go	/^type SensorRouterController struct {$/;"	s	package:routers
Skills Tested:	README.md	/^#### Skills Tested:$/;"	t	subsection:Coding Challenge: Smart City Traffic Management System
Status	internal/models/incident.model.go	/^	Status      string    `gorm:"not null;default:open"`$/;"	m	struct:models.Incident	typeref:typename:string
Status	internal/models/sensor.model.go	/^	Status       bool         `gorm:"type:bool;not null;index:index_sensor_status,where:status=true/;"	m	struct:models.Sensor	typeref:typename:bool
Status	internal/models/sensor.model.go	/^	Status    bool    `json:"status,omitempty"`$/;"	m	struct:models.CreateSensorRequest	typeref:typename:bool
Status	internal/models/sensor.model.go	/^	Status    bool    `json:"status,omitempty"`$/;"	m	struct:models.UpdateSensorRequest	typeref:typename:bool
Story Overview:	DOC.md	/^### Story Overview:$/;"	S
Storyline:	DOC.md	/^### Storyline:$/;"	S
TimeStamp	internal/models/incident.model.go	/^	TimeStamp   time.Time$/;"	m	struct:models.Incident	typeref:typename:time.Time
TimeStamp	internal/models/sensor_data.model.go	/^	TimeStamp    time.Time$/;"	m	struct:models.SensorData	typeref:typename:time.Time
Type	internal/models/incident.model.go	/^	Type        string    `gorm:"not null"`$/;"	m	struct:models.Incident	typeref:typename:string
UpdateByID	internal/controllers/sensor.controller.go	/^func (sc *SensorController) UpdateByID(ctx *gin.Context) {$/;"	f	struct:controllers.SensorController
UpdateSensorRequest	internal/models/sensor.model.go	/^type UpdateSensorRequest struct {$/;"	s	package:models
UpdatedAt	internal/models/sensor.model.go	/^	UpdatedAt    time.Time    `json:"updated_at"`$/;"	m	struct:models.Sensor	typeref:typename:time.Time
Username	internal/config/config.go	/^	Username string$/;"	m	struct:config.DBConfig	typeref:typename:string
VericleCount	internal/models/sensor_data.model.go	/^	VericleCount int       `json:"vericle_count,omitempty"`$/;"	m	struct:models.SensorDataInput	typeref:typename:int
VericleCount	internal/models/sensor_data.model.go	/^	VericleCount int$/;"	m	struct:models.SensorData	typeref:typename:int
config	internal/config/config.go	/^package config$/;"	p
controllers	internal/controllers/sensor.controller.go	/^package controllers$/;"	p
controllers	internal/controllers/sensor_data.controller.go	/^package controllers$/;"	p
init	cmd/api/main.go	/^func init() {$/;"	f	package:main
init	internal/migrate/migrate.go	/^func init() {$/;"	f	package:main
main	cmd/api/main.go	/^func main() {$/;"	f	package:main
main	cmd/api/main.go	/^package main$/;"	p
main	internal/migrate/migrate.go	/^func main() {$/;"	f	package:main
main	internal/migrate/migrate.go	/^package main$/;"	p
models	internal/models/incident.model.go	/^package models$/;"	p
models	internal/models/sensor.model.go	/^package models$/;"	p
models	internal/models/sensor_data.model.go	/^package models$/;"	p
repository	internal/repository/connetDB.go	/^package repository$/;"	p
routers	internal/routers/sensor.router.go	/^package routers$/;"	p
routers	internal/routers/sensor_data.router.go	/^package routers$/;"	p
sensorController	internal/routers/sensor.router.go	/^	sensorController controllers.SensorController$/;"	m	struct:routers.SensorRouterController	typeref:typename:controllers.SensorController
sensorDataController	internal/routers/sensor_data.router.go	/^	sensorDataController controllers.SensorDataController$/;"	m	struct:routers.SensorDataRouterController	typeref:typename:controllers.SensorDataController
server	cmd/api/main.go	/^	server                     *gin.Engine$/;"	v	package:main	typeref:typename:*gin.Engine
services	internal/services/handleError.go	/^package services$/;"	p
